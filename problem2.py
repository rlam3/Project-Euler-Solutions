# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import time

list = [1,2]

# DONT EVEN NEED FIB BECAUSE WE CAN JUST USE 1 AND 2 TO START 
# def fib(x):
# 	if x < 2:
# 		return x
# 	else:
# 		return fib(x-2) + fib(x-1)

def even(y):
	if y % 2 == 0:
		return True
	else:
		return False 

# x is your 4000000

def fiblist(x):
	# while list is less that 4000000
	while (list[-2] + list[-1] < x):
		list.append(list[-2]+list[-1])
	return list
		
# rawinput = input("Enter 4000000")

start = time.time()
list = fiblist(4000000)
		
sum = 0
for i in list:
	if even(i):
		sum = sum + i

elapsed = time.time() - start

print "The sum is::: %i ::: Time elapsed:: %i" %(sum , elapsed)

print elapsed

