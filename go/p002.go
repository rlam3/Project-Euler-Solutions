// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose
// values do not exceed four million, find the sum of the even-valued terms.

package main

import "fmt"

func isEven(value int) bool {
	if value%2 == 0 {
		return true
	}
	return false
}

func main() {

	fibList := []int{1, 2}
	// fibNumber := fibList[len(fibList)-1]

	var valuesUnder = 4000000
	var sumOfAllEvens int

	// Loop from list of 1,2
	// For every new number append to current list that is even
	// Add to summation

	// fmt.Println(startingList)
	// fmt.Println(fibList[len(fibList)-1])
	// second to last element
	// fmt.Println(fibList[len(fibList)-2])

	for fibList[len(fibList)-1]+fibList[len(fibList)-2] < valuesUnder {

		fibNumber := fibList[len(fibList)-1] + fibList[len(fibList)-2]

		// last element
		fibList = append(fibList, fibNumber)

	}

	for _, yy := range fibList {

		// fibNumber := fibList[len(fibList)-1] + fibList[len(fibList)-2]

		// last element
		// fibList = append(fibList, fibNumber)
		if yy%2 == 0 {

			sumOfAllEvens += yy
		}

	}

	fmt.Printf("%t\n", fibList)

	fmt.Printf("%t\n", sumOfAllEvens)

}
